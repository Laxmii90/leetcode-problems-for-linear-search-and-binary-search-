#include <iostream>
#include <vector>
using namespace std;

int findFirst(const vector<int>& arr, int target) {
    int left = 0, right = arr.size() - 1;
    int firstPosition = -1;
    while (left <= right) {
        int mid = left + (right - left) / 2;
        if (arr[mid] == target) {
            firstPosition = mid;
            right = mid - 1; // Move left to find the first occurrence
        } else if (arr[mid] < target) {
            left = mid + 1;
        } else {
            right = mid - 1;
        }
    }
    return firstPosition;
}

int findLast(const vector<int>& arr, int target) {
    int left = 0, right = arr.size() - 1;
    int lastPosition = -1;
    while (left <= right) {
        int mid = left + (right - left) / 2;
        if (arr[mid] == target) {
            lastPosition = mid;
            left = mid + 1; // Move right to find the last occurrence
        } else if (arr[mid] < target) {
            left = mid + 1;
        } else {
            right = mid - 1;
        }
    }
    return lastPosition;
}

pair<int, int> findFirstAndLast(const vector<int>& arr, int target) {
    int first = findFirst(arr, target);
    int last = findLast(arr, target);
    return make_pair(first, last);
}

int main() {
    vector<int> arr = {1, 2, 2, 2, 3, 4, 5};
    int target = 2;
    pair<int, int> positions = findFirstAndLast(arr, target);
    cout << "First position: " << positions.first << endl;
    cout << "Last position: " << positions.second << endl;
    return 0;
}
